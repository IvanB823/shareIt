services:
  db:
    image: postgres:16.1
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=shareit
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=12345
    healthcheck:
      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 5s
      interval: 5s
      retries: 10

    # ещё один сервис
  db-init:
    image: postgres:16.1
    container_name: db-init
    # секция для указания зависимостей от других сервисов
    depends_on:
      # указываем, что этот сервис зависит от сервиса с именем db
      db:
        # указываем, что условием запуска будет момент, когда
        # сервис db будет в «здоровом» состоянии
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        set -e
        psql postgresql://postgres:12345@db:5432/shareit -v ON_ERROR_STOP=1 <<-EOSQL
            CREATE TABLE IF NOT EXISTS users (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            name VARCHAR(255) NOT NULL,
            email VARCHAR(512) NOT NULL,
            CONSTRAINT pk_user PRIMARY KEY (id),
            CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
            );
            CREATE TABLE IF NOT EXISTS item_requests (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            description VARCHAR(512) NOT NULL,
            created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
            requester_id BIGINT NOT NULL,
            CONSTRAINT pk_item_request PRIMARY KEY (id),
            CONSTRAINT fk_item_requests_to_users FOREIGN KEY (requester_id) REFERENCES users (id)
            );
            CREATE TABLE IF NOT EXISTS items (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            name VARCHAR(255) NOT NULL,
            description VARCHAR(512) NOT NULL,
            is_available BOOLEAN NOT NULL,
            owner_id BIGINT NOT NULL,
            request_id BIGINT,
            CONSTRAINT pk_item PRIMARY KEY (id),
            CONSTRAINT fk_items_to_users FOREIGN KEY (owner_id) REFERENCES users (id),
            CONSTRAINT fk_items_to_item_requests FOREIGN KEY (request_id) REFERENCES item_requests (id)
            );
            CREATE TABLE IF NOT EXISTS bookings (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            start_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
            end_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
            item_id BIGINT NOT NULL,
            booker_id BIGINT NOT NULL,
            status VARCHAR(50) NOT NULL,
            CONSTRAINT pk_booking PRIMARY KEY (id),
            CONSTRAINT fk_bookings_to_items FOREIGN KEY (item_id) REFERENCES items (id),
            CONSTRAINT fk_bookings_to_users FOREIGN KEY (booker_id) REFERENCES users (id)
            );
            CREATE TABLE IF NOT EXISTS comments (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            text VARCHAR(512) NOT NULL,
            item_id BIGINT NOT NULL,
            author_id BIGINT NOT NULL,
            created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
            CONSTRAINT pk_comment PRIMARY KEY (id),
            CONSTRAINT fk_comments_to_items FOREIGN KEY (item_id) REFERENCES items (id),
            CONSTRAINT fk_comments_to_users FOREIGN KEY (author_id) REFERENCES users (id)
            );
        EOSQL